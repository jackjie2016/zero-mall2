// Code generated by goctl. DO NOT EDIT!

package gorm

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
	"strings"
	"time"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMallUserIdPrefix     = "cache:goZeroMall:user:id:"
	cacheGoZeroMallUserMobilePrefix = "cache:goZeroMall:user:mobile:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) error
		FindOne(ctx context.Context, id int64) (*User, error)

		FindOneByMobile(ctx context.Context, mobile string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		gormc.CachedConn
		table string
	}

	BaseModel struct {
		Id        int64     `gorm:"primarykey"`
		CreatedAt time.Time `gorm:"column:create_time"`
		UpdatedAt time.Time `gorm:"column:update_time"`
		DeletedAt gorm.DeletedAt
		IsDeleted bool
	}

	//md5 信息摘要算法
	User struct {
		BaseModel
		Mobile   string         `gorm:"index:idx_mobile;unique;type:varchar(11);not null"`
		Password string         `gorm:"type:varchar(100);not null"`
		NickName string         `gorm:"type:varchar(20);not null"`
		Birthday *time.Time     `gorm:"type:datetime"`
		Gender   string         `gorm:"column:gender;default:male;type:varchar(6) comment 'female 表示女 male表示男'"`
		Role     int            `gorm:"column:role;default:1;type:int(1) comment '1 表示普通用户 2表示管理员'"`
		Desc     sql.NullString `gorm:"column:desc;default:null;type:varchar(120) comment '介绍'"`
		HeadUrl  sql.NullString `gorm:"column:head_url;default:null;type:varchar(120) comment '头像'"`
	}
)

//func (u *User) BeforeCreate(tx *gorm.DB) (err error) {
//	u.UUID = uuid.New()
//
//	if !u.IsValid() {
//		err = errors.New("can't save invalid data")
//	}
//	return
//}
//
//func (u *User) AfterCreate(tx *gorm.DB) (err error) {
//	if u.ID == 1 {
//		tx.Model(u).Update("role", "admin")
//	}
//	return
//}

func newUserModel(conn *gorm.DB, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) error {
	goZeroMallUserIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserIdPrefix, data.Id)
	goZeroMallUserMobileKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserMobilePrefix, data.Mobile)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, goZeroMallUserIdKey, goZeroMallUserMobileKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	goZeroMallUserIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserIdPrefix, id)
	var resp User
	err := m.QueryCtx(ctx, &resp, goZeroMallUserIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&User{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByMobile(ctx context.Context, mobile string) (*User, error) {
	goZeroMallUserMobileKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserMobilePrefix, mobile)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallUserMobileKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&User{}).Where("`mobile` = ?", mobile).First(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Update(ctx context.Context, data *User) error {
	goZeroMallUserIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserIdPrefix, data.Id)
	goZeroMallUserMobileKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserMobilePrefix, data.Mobile)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, goZeroMallUserIdKey, goZeroMallUserMobileKey)
	return err
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroMallUserIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserIdPrefix, id)
	goZeroMallUserMobileKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserMobilePrefix, data.Mobile)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&User{}, id).Error
	}, goZeroMallUserIdKey, goZeroMallUserMobileKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&User{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultUserModel) tableName() string {
	return m.table
}

//func (User) TableName() string {
//	model := defaultUserModel{}
//
//	return model.tableName()
//}
