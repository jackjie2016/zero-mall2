// Code generated by goctl. DO NOT EDIT!

package gorm

import (
	"context"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
	"strings"
)

var (
	inventoryFieldNames          = builder.RawFieldNames(&Inventory{})
	inventoryRows                = strings.Join(inventoryFieldNames, ",")
	inventoryRowsExpectAutoSet   = strings.Join(stringx.Remove(inventoryFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	inventoryRowsWithPlaceHolder = strings.Join(stringx.Remove(inventoryFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMallInventoryIdPrefix    = "cache:goZeroMall:inventory:id:"
	cacheGoZeroMallInventoryGoodsPrefix = "cache:goZeroMall:inventory:goods:"
)

type (
	inventoryModel interface {
		Insert(ctx context.Context, data *Inventory) error
		FindOne(ctx context.Context, id int64) (*Inventory, error)
		FindOneByGoods(ctx context.Context, goods int64) (*Inventory, error)
		Update(ctx context.Context, data *Inventory) error
		Delete(ctx context.Context, id int64) error

		TransCtx(ctx context.Context, fn func(ctx context.Context, conn *gorm.DB) error) error
	}

	defaultInventoryModel struct {
		gormc.CachedConn
		table string
	}

	Inventory struct {
		BaseModel

		GoodsID int32 `gorm:"type:int;index;column:goods_id"`
		Stocks  int32 `gorm:"type:int;column:stocks"`
		Version int32 `gorm:"type:int;column:version"`
		Freeze  int64 `gorm:"type:int;column:freeze"` //冻结库存
	}
)

func newInventoryModel(conn *gorm.DB, c cache.CacheConf) *defaultInventoryModel {
	return &defaultInventoryModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`inventory`",
	}
}

func (m *defaultInventoryModel) Insert(ctx context.Context, data *Inventory) error {
	goZeroMallInventoryGoodsKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryGoodsPrefix, data.GoodsID)
	goZeroMallInventoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryIdPrefix, data.Id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, goZeroMallInventoryGoodsKey, goZeroMallInventoryIdKey)
	return err
}

func (m *defaultInventoryModel) FindOne(ctx context.Context, id int64) (*Inventory, error) {
	goZeroMallInventoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryIdPrefix, id)
	var resp Inventory
	err := m.QueryCtx(ctx, &resp, goZeroMallInventoryIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Inventory{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInventoryModel) FindOneByGoods(ctx context.Context, goods int64) (*Inventory, error) {
	goZeroMallInventoryGoodsKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryGoodsPrefix, goods)
	var resp Inventory
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallInventoryGoodsKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&Inventory{}).Where("`goods` = ?", goods).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInventoryModel) Update(ctx context.Context, data *Inventory) error {
	goZeroMallInventoryGoodsKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryGoodsPrefix, data.GoodsID)
	goZeroMallInventoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryIdPrefix, data.Id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, goZeroMallInventoryGoodsKey, goZeroMallInventoryIdKey)
	return err
}

func (m *defaultInventoryModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroMallInventoryGoodsKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryGoodsPrefix, data.GoodsID)
	goZeroMallInventoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryIdPrefix, id)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&Inventory{}, id).Error
	}, goZeroMallInventoryGoodsKey, goZeroMallInventoryIdKey)
	return err
}
func (m *defaultInventoryModel) TransCtx(ctx context.Context, fn func(ctx context.Context, conn *gorm.DB) error) error {
	return m.TransactCtx(ctx, func(c *gorm.DB) error {
		return fn(ctx, c)
	})
}

func (m *defaultInventoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallInventoryIdPrefix, primary)
}

func (m *defaultInventoryModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Inventory{}).Where("`id` = ?", primary).Take(v).Error
}
