// Code generated by goctl. DO NOT EDIT!

package gorm

import (
	"context"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
	"strings"
)

var (
	inventoryHistoryFieldNames          = builder.RawFieldNames(&InventoryHistory{})
	inventoryHistoryRows                = strings.Join(inventoryHistoryFieldNames, ",")
	inventoryHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(inventoryHistoryFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	inventoryHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(inventoryHistoryFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMallInventoryHistoryIdPrefix      = "cache:goZeroMall:inventoryHistory:id:"
	cacheGoZeroMallInventoryHistoryOrderSnPrefix = "cache:goZeroMall:inventoryHistory:orderSn:"
)

type (
	inventoryHistoryModel interface {
		Insert(ctx context.Context, data *InventoryHistory) error
		FindOne(ctx context.Context, id int64) (*InventoryHistory, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*InventoryHistory, error)
		Update(ctx context.Context, data *InventoryHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultInventoryHistoryModel struct {
		gormc.CachedConn
		table string
	}

	InventoryHistory struct {
		BaseModel

		OrderSn        string `gorm:"column:order_sn"`
		OrderInvDetail string `gorm:"column:order_inv_detail"`
		Status         int32  `gorm:"column:status"`
	}
)

func newInventoryHistoryModel(conn *gorm.DB, c cache.CacheConf) *defaultInventoryHistoryModel {
	return &defaultInventoryHistoryModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`inventory_history`",
	}
}

func (m *defaultInventoryHistoryModel) Insert(ctx context.Context, data *InventoryHistory) error {
	goZeroMallInventoryHistoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryHistoryIdPrefix, data.Id)
	goZeroMallInventoryHistoryOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryHistoryOrderSnPrefix, data.OrderSn)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, goZeroMallInventoryHistoryIdKey, goZeroMallInventoryHistoryOrderSnKey)
	return err
}

func (m *defaultInventoryHistoryModel) FindOne(ctx context.Context, id int64) (*InventoryHistory, error) {
	goZeroMallInventoryHistoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryHistoryIdPrefix, id)
	var resp InventoryHistory
	err := m.QueryCtx(ctx, &resp, goZeroMallInventoryHistoryIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&InventoryHistory{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInventoryHistoryModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*InventoryHistory, error) {
	goZeroMallInventoryHistoryOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryHistoryOrderSnPrefix, orderSn)
	var resp InventoryHistory
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallInventoryHistoryOrderSnKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&InventoryHistory{}).Where("`order_sn` = ?", orderSn).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInventoryHistoryModel) Update(ctx context.Context, data *InventoryHistory) error {
	goZeroMallInventoryHistoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryHistoryIdPrefix, data.Id)
	goZeroMallInventoryHistoryOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryHistoryOrderSnPrefix, data.OrderSn)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, goZeroMallInventoryHistoryIdKey, goZeroMallInventoryHistoryOrderSnKey)
	return err
}

func (m *defaultInventoryHistoryModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroMallInventoryHistoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryHistoryIdPrefix, id)
	goZeroMallInventoryHistoryOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallInventoryHistoryOrderSnPrefix, data.OrderSn)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&InventoryHistory{}, id).Error
	}, goZeroMallInventoryHistoryIdKey, goZeroMallInventoryHistoryOrderSnKey)
	return err
}

func (m *defaultInventoryHistoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallInventoryHistoryIdPrefix, primary)
}

func (m *defaultInventoryHistoryModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&InventoryHistory{}).Where("`id` = ?", primary).Take(v).Error
}
