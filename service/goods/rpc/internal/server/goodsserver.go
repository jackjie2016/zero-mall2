// Code generated by goctl. DO NOT EDIT!
// Source: goods.proto

package server

import (
	"context"

	pb "zero-mal/service/goods/rpc/goods_pb"
	"zero-mal/service/goods/rpc/internal/logic"
	"zero-mal/service/goods/rpc/internal/svc"
)

type GoodsServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedGoodsServer
}

func NewGoodsServer(svcCtx *svc.ServiceContext) *GoodsServer {
	return &GoodsServer{
		svcCtx: svcCtx,
	}
}

// 商品接口
func (s *GoodsServer) GoodsList(ctx context.Context, in *pb.GoodsFilterRequest) (*pb.GoodsListResponse, error) {
	l := logic.NewGoodsListLogic(ctx, s.svcCtx)
	return l.GoodsList(in)
}

// 现在用户提交订单有多个商品，你得批量查询商品的信息吧
func (s *GoodsServer) BatchGetGoods(ctx context.Context, in *pb.BatchGoodsIdInfo) (*pb.GoodsListResponse, error) {
	l := logic.NewBatchGetGoodsLogic(ctx, s.svcCtx)
	return l.BatchGetGoods(in)
}

func (s *GoodsServer) CreateGoods(ctx context.Context, in *pb.CreateGoodsInfo) (*pb.GoodsInfoResponse, error) {
	l := logic.NewCreateGoodsLogic(ctx, s.svcCtx)
	return l.CreateGoods(in)
}

func (s *GoodsServer) DeleteGoods(ctx context.Context, in *pb.DeleteGoodsInfo) (*pb.Empty, error) {
	l := logic.NewDeleteGoodsLogic(ctx, s.svcCtx)
	return l.DeleteGoods(in)
}

func (s *GoodsServer) UpdateGoods(ctx context.Context, in *pb.CreateGoodsInfo) (*pb.Empty, error) {
	l := logic.NewUpdateGoodsLogic(ctx, s.svcCtx)
	return l.UpdateGoods(in)
}

func (s *GoodsServer) GetGoodsDetail(ctx context.Context, in *pb.GoodInfoRequest) (*pb.GoodsInfoResponse, error) {
	l := logic.NewGetGoodsDetailLogic(ctx, s.svcCtx)
	return l.GetGoodsDetail(in)
}

// 商品分类
func (s *GoodsServer) GetAllCategorysList(ctx context.Context, in *pb.Empty) (*pb.CategoryListResponse, error) {
	l := logic.NewGetAllCategorysListLogic(ctx, s.svcCtx)
	return l.GetAllCategorysList(in)
}

// 获取子分类
func (s *GoodsServer) GetSubCategory(ctx context.Context, in *pb.CategoryListRequest) (*pb.SubCategoryListResponse, error) {
	l := logic.NewGetSubCategoryLogic(ctx, s.svcCtx)
	return l.GetSubCategory(in)
}

func (s *GoodsServer) CreateCategory(ctx context.Context, in *pb.CategoryInfoRequest) (*pb.CategoryInfoResponse, error) {
	l := logic.NewCreateCategoryLogic(ctx, s.svcCtx)
	return l.CreateCategory(in)
}

func (s *GoodsServer) DeleteCategory(ctx context.Context, in *pb.DeleteCategoryRequest) (*pb.Empty, error) {
	l := logic.NewDeleteCategoryLogic(ctx, s.svcCtx)
	return l.DeleteCategory(in)
}

func (s *GoodsServer) UpdateCategory(ctx context.Context, in *pb.CategoryInfoRequest) (*pb.Empty, error) {
	l := logic.NewUpdateCategoryLogic(ctx, s.svcCtx)
	return l.UpdateCategory(in)
}

// 品牌和轮播图
func (s *GoodsServer) BrandList(ctx context.Context, in *pb.BrandFilterRequest) (*pb.BrandListResponse, error) {
	l := logic.NewBrandListLogic(ctx, s.svcCtx)
	return l.BrandList(in)
}

func (s *GoodsServer) CreateBrand(ctx context.Context, in *pb.BrandRequest) (*pb.BrandInfoResponse, error) {
	l := logic.NewCreateBrandLogic(ctx, s.svcCtx)
	return l.CreateBrand(in)
}

func (s *GoodsServer) DeleteBrand(ctx context.Context, in *pb.BrandRequest) (*pb.Empty, error) {
	l := logic.NewDeleteBrandLogic(ctx, s.svcCtx)
	return l.DeleteBrand(in)
}

func (s *GoodsServer) UpdateBrand(ctx context.Context, in *pb.BrandRequest) (*pb.Empty, error) {
	l := logic.NewUpdateBrandLogic(ctx, s.svcCtx)
	return l.UpdateBrand(in)
}

// 轮播图
func (s *GoodsServer) BannerList(ctx context.Context, in *pb.Empty) (*pb.BannerListResponse, error) {
	l := logic.NewBannerListLogic(ctx, s.svcCtx)
	return l.BannerList(in)
}

func (s *GoodsServer) CreateBanner(ctx context.Context, in *pb.BannerRequest) (*pb.BannerResponse, error) {
	l := logic.NewCreateBannerLogic(ctx, s.svcCtx)
	return l.CreateBanner(in)
}

func (s *GoodsServer) DeleteBanner(ctx context.Context, in *pb.BannerRequest) (*pb.Empty, error) {
	l := logic.NewDeleteBannerLogic(ctx, s.svcCtx)
	return l.DeleteBanner(in)
}

func (s *GoodsServer) UpdateBanner(ctx context.Context, in *pb.BannerRequest) (*pb.Empty, error) {
	l := logic.NewUpdateBannerLogic(ctx, s.svcCtx)
	return l.UpdateBanner(in)
}

// 品牌分类
func (s *GoodsServer) CategoryBrandList(ctx context.Context, in *pb.CategoryBrandFilterRequest) (*pb.CategoryBrandListResponse, error) {
	l := logic.NewCategoryBrandListLogic(ctx, s.svcCtx)
	return l.CategoryBrandList(in)
}

// 通过category获取brands
func (s *GoodsServer) GetCategoryBrandList(ctx context.Context, in *pb.CategoryInfoRequest) (*pb.BrandListResponse, error) {
	l := logic.NewGetCategoryBrandListLogic(ctx, s.svcCtx)
	return l.GetCategoryBrandList(in)
}

func (s *GoodsServer) CreateCategoryBrand(ctx context.Context, in *pb.CategoryBrandRequest) (*pb.CategoryBrandResponse, error) {
	l := logic.NewCreateCategoryBrandLogic(ctx, s.svcCtx)
	return l.CreateCategoryBrand(in)
}

func (s *GoodsServer) DeleteCategoryBrand(ctx context.Context, in *pb.CategoryBrandRequest) (*pb.Empty, error) {
	l := logic.NewDeleteCategoryBrandLogic(ctx, s.svcCtx)
	return l.DeleteCategoryBrand(in)
}

func (s *GoodsServer) UpdateCategoryBrand(ctx context.Context, in *pb.CategoryBrandRequest) (*pb.Empty, error) {
	l := logic.NewUpdateCategoryBrandLogic(ctx, s.svcCtx)
	return l.UpdateCategoryBrand(in)
}
