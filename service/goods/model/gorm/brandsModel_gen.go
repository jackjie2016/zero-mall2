// Code generated by goctl. DO NOT EDIT!

package gorm

import (
	"context"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
	"strings"
)

var (
	brandsFieldNames          = builder.RawFieldNames(&Brands{})
	brandsRows                = strings.Join(brandsFieldNames, ",")
	brandsRowsExpectAutoSet   = strings.Join(stringx.Remove(brandsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	brandsRowsWithPlaceHolder = strings.Join(stringx.Remove(brandsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMallBrandsIdPrefix   = "cache:goZeroMall:brands:id:"
	cacheGoZeroMallBrandsNamePrefix = "cache:goZeroMall:brands:name:"
)

type (
	brandsModel interface {
		Insert(ctx context.Context, data *Brands) error
		FindOne(ctx context.Context, id int64) (*Brands, error)
		FindOneByName(ctx context.Context, name string) (*Brands, error)
		Update(ctx context.Context, data *Brands) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBrandsModel struct {
		gormc.CachedConn
		table string
	}

	Brands struct {
		BaseModel
		Name string `gorm:"type:varchar(20);not null"`
		Logo string `gorm:"type:varchar(200);default:'';not null"`
	}
)

func newBrandsModel(conn *gorm.DB, c cache.CacheConf) *defaultBrandsModel {
	return &defaultBrandsModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`brands`",
	}
}

func (m *defaultBrandsModel) Insert(ctx context.Context, data *Brands) error {
	goZeroMallBrandsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsIdPrefix, data.Id)
	goZeroMallBrandsNameKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsNamePrefix, data.Name)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, goZeroMallBrandsIdKey, goZeroMallBrandsNameKey)
	return err
}

func (m *defaultBrandsModel) FindOne(ctx context.Context, id int64) (*Brands, error) {
	goZeroMallBrandsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsIdPrefix, id)
	var resp Brands
	err := m.QueryCtx(ctx, &resp, goZeroMallBrandsIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Brands{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBrandsModel) FindOneByName(ctx context.Context, name string) (*Brands, error) {
	goZeroMallBrandsNameKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsNamePrefix, name)
	var resp Brands
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallBrandsNameKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&Brands{}).Where("`name` = ?", name).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBrandsModel) Update(ctx context.Context, data *Brands) error {
	goZeroMallBrandsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsIdPrefix, data.Id)
	goZeroMallBrandsNameKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsNamePrefix, data.Name)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, goZeroMallBrandsIdKey, goZeroMallBrandsNameKey)
	return err
}

func (m *defaultBrandsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroMallBrandsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsIdPrefix, id)
	goZeroMallBrandsNameKey := fmt.Sprintf("%s%v", cacheGoZeroMallBrandsNamePrefix, data.Name)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&Brands{}, id).Error
	}, goZeroMallBrandsIdKey, goZeroMallBrandsNameKey)
	return err
}

func (m *defaultBrandsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallBrandsIdPrefix, primary)
}

func (m *defaultBrandsModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Brands{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultBrandsModel) tableName() string {
	return m.table
}
