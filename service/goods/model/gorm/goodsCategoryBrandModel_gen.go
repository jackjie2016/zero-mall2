// Code generated by goctl. DO NOT EDIT!

package gorm

import (
	"context"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
	"strings"
)

var (
	goodsCategoryBrandFieldNames          = builder.RawFieldNames(&GoodsCategoryBrand{})
	goodsCategoryBrandRows                = strings.Join(goodsCategoryBrandFieldNames, ",")
	goodsCategoryBrandRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsCategoryBrandFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	goodsCategoryBrandRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsCategoryBrandFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMallGoodsCategoryBrandIdPrefix                = "cache:goZeroMall:goodsCategoryBrand:id:"
	cacheGoZeroMallGoodsCategoryBrandCategoryIdBrandIdPrefix = "cache:goZeroMall:goodsCategoryBrand:categoryId:brandId:"
)

type (
	goodsCategoryBrandModel interface {
		Insert(ctx context.Context, data *GoodsCategoryBrand) error
		FindOne(ctx context.Context, id int64) (*GoodsCategoryBrand, error)
		FindOneByCategoryIdBrandId(ctx context.Context, categoryId int64, brandId int64) (*GoodsCategoryBrand, error)
		Update(ctx context.Context, data *GoodsCategoryBrand) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGoodsCategoryBrandModel struct {
		gormc.CachedConn
		table string
	}

	GoodsCategoryBrand struct {
		BaseModel
		CategoryId int32 `gorm:"type:int;index:idx_category_brand,unique"`
		Category   Category

		BrandId int32  `gorm:"type:int;index:idx_category_brand,unique"`
		Brands  Brands `gorm:"foreignKey:BrandId;references:Id" json:"-"`
	}
)

func newGoodsCategoryBrandModel(conn *gorm.DB, c cache.CacheConf) *defaultGoodsCategoryBrandModel {
	return &defaultGoodsCategoryBrandModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`goods_category_brand`",
	}
}
func (GoodsCategoryBrand) TableName() string {
	return "goods_category_brand"
}

func (m *defaultGoodsCategoryBrandModel) Insert(ctx context.Context, data *GoodsCategoryBrand) error {
	goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallGoodsCategoryBrandCategoryIdBrandIdPrefix, data.CategoryId, data.BrandId)
	goZeroMallGoodsCategoryBrandIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsCategoryBrandIdPrefix, data.Id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey, goZeroMallGoodsCategoryBrandIdKey)
	return err
}

func (m *defaultGoodsCategoryBrandModel) FindOne(ctx context.Context, id int64) (*GoodsCategoryBrand, error) {
	goZeroMallGoodsCategoryBrandIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsCategoryBrandIdPrefix, id)
	var resp GoodsCategoryBrand
	err := m.QueryCtx(ctx, &resp, goZeroMallGoodsCategoryBrandIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&GoodsCategoryBrand{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsCategoryBrandModel) FindOneByCategoryIdBrandId(ctx context.Context, categoryId int64, brandId int64) (*GoodsCategoryBrand, error) {
	goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallGoodsCategoryBrandCategoryIdBrandIdPrefix, categoryId, brandId)
	var resp GoodsCategoryBrand
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&GoodsCategoryBrand{}).Where("`category_id` = ? and `brand_id` = ?", categoryId, brandId).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsCategoryBrandModel) Update(ctx context.Context, data *GoodsCategoryBrand) error {
	goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallGoodsCategoryBrandCategoryIdBrandIdPrefix, data.CategoryId, data.BrandId)
	goZeroMallGoodsCategoryBrandIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsCategoryBrandIdPrefix, data.Id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey, goZeroMallGoodsCategoryBrandIdKey)
	return err
}

func (m *defaultGoodsCategoryBrandModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallGoodsCategoryBrandCategoryIdBrandIdPrefix, data.CategoryId, data.BrandId)
	goZeroMallGoodsCategoryBrandIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsCategoryBrandIdPrefix, id)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&GoodsCategoryBrand{}, id).Error
	}, goZeroMallGoodsCategoryBrandCategoryIdBrandIdKey, goZeroMallGoodsCategoryBrandIdKey)
	return err
}

func (m *defaultGoodsCategoryBrandModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallGoodsCategoryBrandIdPrefix, primary)
}

func (m *defaultGoodsCategoryBrandModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&GoodsCategoryBrand{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultGoodsCategoryBrandModel) tableName() string {
	return m.table
}
