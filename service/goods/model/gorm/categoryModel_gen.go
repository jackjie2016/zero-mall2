// Code generated by goctl. DO NOT EDIT!

package gorm

import (
	"context"
	"fmt"
	"strings"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
)

var (
	categoryFieldNames          = builder.RawFieldNames(&Category{})
	categoryRows                = strings.Join(categoryFieldNames, ",")
	categoryRowsExpectAutoSet   = strings.Join(stringx.Remove(categoryFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	categoryRowsWithPlaceHolder = strings.Join(stringx.Remove(categoryFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMallCategoryIdPrefix = "cache:goZeroMall:category:id:"
)

type (
	categoryModel interface {
		Insert(ctx context.Context, data *Category) error
		FindOne(ctx context.Context, id int64) (*Category, error)
		Update(ctx context.Context, data *Category) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCategoryModel struct {
		gormc.CachedConn
		table string
	}

	Category struct {
		BaseModel
		Name             string      `gorm:"type:varchar(20);not null" json:"name"`
		ParentCategoryID int32       `json:"parent"`
		ParentCategory   *Category   `json:"-"`
		SubCategory      []*Category `gorm:"foreignKey:ParentCategoryID;references:Id" json:"-"`
		Level            int32       `gorm:"type:int;not null;default:1" json:"level"`
		IsTab            bool        `gorm:"default:false;not null" json:"is_tab"`
	}
)

func newCategoryModel(conn *gorm.DB, c cache.CacheConf) *defaultCategoryModel {
	return &defaultCategoryModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`category`",
	}
}

func (m *defaultCategoryModel) Insert(ctx context.Context, data *Category) error {
	goZeroMallCategoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCategoryIdPrefix, data.Id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, goZeroMallCategoryIdKey)
	return err
}

func (m *defaultCategoryModel) FindOne(ctx context.Context, id int64) (*Category, error) {
	goZeroMallCategoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCategoryIdPrefix, id)
	var resp Category
	err := m.QueryCtx(ctx, &resp, goZeroMallCategoryIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Category{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoryModel) Update(ctx context.Context, data *Category) error {
	goZeroMallCategoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCategoryIdPrefix, data.Id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, goZeroMallCategoryIdKey)
	return err
}

func (m *defaultCategoryModel) Delete(ctx context.Context, id int64) error {
	goZeroMallCategoryIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCategoryIdPrefix, id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&Category{}, id).Error
	}, goZeroMallCategoryIdKey)
	return err
}

func (m *defaultCategoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallCategoryIdPrefix, primary)
}

func (m *defaultCategoryModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Category{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultCategoryModel) tableName() string {
	return m.table
}
