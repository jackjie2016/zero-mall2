// Code generated by goctl. DO NOT EDIT!

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	attachmentFieldNames          = builder.RawFieldNames(&Attachment{})
	attachmentRows                = strings.Join(attachmentFieldNames, ",")
	attachmentRowsExpectAutoSet   = strings.Join(stringx.Remove(attachmentFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	attachmentRowsWithPlaceHolder = strings.Join(stringx.Remove(attachmentFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoZeroMallAttachmentIdPrefix = "cache:goZeroMall:attachment:id:"
)

type (
	attachmentModel interface {
		Insert(ctx context.Context, data *Attachment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Attachment, error)
		Update(ctx context.Context, newData *Attachment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAttachmentModel struct {
		sqlc.CachedConn
		table string
	}

	Attachment struct {
		Id          int64         `db:"id"`          // ID
		Category    string        `db:"category"`    // 类别
		AdminId     int64         `db:"admin_id"`    // 管理员ID
		UserId      int64         `db:"user_id"`     // 会员ID
		Url         string        `db:"url"`         // 物理路径
		Imagewidth  string        `db:"imagewidth"`  // 宽度
		Imageheight string        `db:"imageheight"` // 高度
		Imagetype   string        `db:"imagetype"`   // 图片类型
		Imageframes int64         `db:"imageframes"` // 图片帧数
		Filename    string        `db:"filename"`    // 文件名称
		Filesize    int64         `db:"filesize"`    // 文件大小
		Mimetype    string        `db:"mimetype"`    // mime类型
		Extparam    string        `db:"extparam"`    // 透传数据
		Createtime  sql.NullInt64 `db:"createtime"`  // 创建日期
		Updatetime  sql.NullInt64 `db:"updatetime"`  // 更新时间
		Uploadtime  sql.NullInt64 `db:"uploadtime"`  // 上传时间
		Storage     string        `db:"storage"`     // 存储位置
		Sha1        string        `db:"sha1"`        // 文件 sha1编码
	}
)

func newAttachmentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAttachmentModel {
	return &defaultAttachmentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`attachment`",
	}
}

func (m *defaultAttachmentModel) Delete(ctx context.Context, id int64) error {
	goZeroMallAttachmentIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallAttachmentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroMallAttachmentIdKey)
	return err
}

func (m *defaultAttachmentModel) FindOne(ctx context.Context, id int64) (*Attachment, error) {
	goZeroMallAttachmentIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallAttachmentIdPrefix, id)
	var resp Attachment
	err := m.QueryRowCtx(ctx, &resp, goZeroMallAttachmentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", attachmentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAttachmentModel) Insert(ctx context.Context, data *Attachment) (sql.Result, error) {
	goZeroMallAttachmentIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallAttachmentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, attachmentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Category, data.AdminId, data.UserId, data.Url, data.Imagewidth, data.Imageheight, data.Imagetype, data.Imageframes, data.Filename, data.Filesize, data.Mimetype, data.Extparam, data.Createtime, data.Updatetime, data.Uploadtime, data.Storage, data.Sha1)
	}, goZeroMallAttachmentIdKey)
	return ret, err
}

func (m *defaultAttachmentModel) Update(ctx context.Context, data *Attachment) error {
	goZeroMallAttachmentIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallAttachmentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, attachmentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Category, data.AdminId, data.UserId, data.Url, data.Imagewidth, data.Imageheight, data.Imagetype, data.Imageframes, data.Filename, data.Filesize, data.Mimetype, data.Extparam, data.Createtime, data.Updatetime, data.Uploadtime, data.Storage, data.Sha1, data.Id)
	}, goZeroMallAttachmentIdKey)
	return err
}

func (m *defaultAttachmentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallAttachmentIdPrefix, primary)
}

func (m *defaultAttachmentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", attachmentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAttachmentModel) tableName() string {
	return m.table
}
