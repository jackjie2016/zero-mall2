// Code generated by goctl. DO NOT EDIT!

package gorm

import (
	"context"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
	"strings"
)

var (
	cartFieldNames          = builder.RawFieldNames(&Cart{})
	cartRows                = strings.Join(cartFieldNames, ",")
	cartRowsExpectAutoSet   = strings.Join(stringx.Remove(cartFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	cartRowsWithPlaceHolder = strings.Join(stringx.Remove(cartFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMallCartIdPrefix       = "cache:goZeroMall:cart:id:"
	cacheGoZeroMallCartUserGoodPrefix = "cache:goZeroMall:cart:UserGood:"
)

type (
	cartModel interface {
		Insert(ctx context.Context, data *Cart) error
		FindOne(ctx context.Context, id int64) (*Cart, error)
		FindOneByUserGoods(ctx context.Context, userid, goodsid int32) (*Cart, error)
		Update(ctx context.Context, data *Cart) error
		Delete(ctx context.Context, id int64) error
		DeleteByUserGood(ctx context.Context, userid, goodsid int32) error
	}

	defaultCartModel struct {
		gormc.CachedConn
		table string
	}

	Cart struct {
		BaseModel

		UserID  int32 `gorm:"column:user_id"`
		GoodsID int32 `gorm:"column:goods_id"`
		Nums    int32 `gorm:"column:nums"`
		Checked bool  `gorm:"column:checked"`
	}
)

func newCartModel(conn *gorm.DB, c cache.CacheConf) *defaultCartModel {
	return &defaultCartModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`cart`",
	}
}

func (m *defaultCartModel) Insert(ctx context.Context, data *Cart) error {
	goZeroMallCartIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCartIdPrefix, data.Id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, goZeroMallCartIdKey)
	return err
}

func (m *defaultCartModel) FindOne(ctx context.Context, id int64) (*Cart, error) {
	goZeroMallCartIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCartIdPrefix, id)
	var resp Cart
	err := m.QueryCtx(ctx, &resp, goZeroMallCartIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Cart{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultCartModel) FindOneByUserGoods(ctx context.Context, userid, goodsid int32) (*Cart, error) {
	goZeroMallCartUserGoodoKey := fmt.Sprintf("%s%v_%v", cacheGoZeroMallCartUserGoodPrefix, userid, goodsid)
	var resp Cart
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallCartUserGoodoKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&Cart{}).Where("user_id=? and goods_id=?", userid, goodsid).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultCartModel) Update(ctx context.Context, data *Cart) error {
	goZeroMallCartIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCartIdPrefix, data.Id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, goZeroMallCartIdKey)
	return err
}
func (m *defaultCartModel) Delete(ctx context.Context, id int64) error {
	goZeroMallCartIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCartIdPrefix, id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&Cart{}, id).Error
	}, goZeroMallCartIdKey)
	return err
}
func (m *defaultCartModel) DeleteByUserGood(ctx context.Context, userid, goodsid int32) error {
	goZeroMallCartUserGoodoKey := fmt.Sprintf("%s%v_%v", cacheGoZeroMallCartUserGoodPrefix, userid, goodsid)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Where("user_id=? and goods_id=?", userid, goodsid).Delete(&Cart{}).Error
	}, goZeroMallCartUserGoodoKey)
	return err
}
func (m *defaultCartModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallCartIdPrefix, primary)
}

func (m *defaultCartModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Cart{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultCartModel) tableName() string {
	return m.table
}
