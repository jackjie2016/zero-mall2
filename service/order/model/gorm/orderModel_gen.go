// Code generated by goctl. DO NOT EDIT!

package gorm

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
	"strings"
	"time"
)

var (
	orderFieldNames          = builder.RawFieldNames(&Order{})
	orderRows                = strings.Join(orderFieldNames, ",")
	orderRowsExpectAutoSet   = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	orderRowsWithPlaceHolder = strings.Join(stringx.Remove(orderFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMallOrderIdPrefix      = "cache:goZeroMall:order:id:"
	cacheGoZeroMallOrderOrderSnPrefix = "cache:goZeroMall:order:orderSn:"
	cacheGoZeroMallOrderTradeNoPrefix = "cache:goZeroMall:order:tradeNo:"
)

type (
	orderModel interface {
		Insert(ctx context.Context, data *Order) error
		FindOne(ctx context.Context, id int64) (*Order, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*Order, error)
		FindOneByTradeNo(ctx context.Context, tradeNo string) (*Order, error)
		Update(ctx context.Context, data *Order) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderModel struct {
		gormc.CachedConn
		table string
	}

	Order struct {
		BaseModel

		UserID       int32          `gorm:"column:user_id"`
		OrderSn      string         `gorm:"column:order_sn"`
		PayType      string         `gorm:"column:pay_type"`
		Status       string         `gorm:"column:status"`
		TradeNo      sql.NullString `gorm:"column:trade_no"`
		OrderMount   float32        `gorm:"column:order_mount"`
		PayTime      *time.Time     `gorm:"column:pay_time"`
		Address      string         `gorm:"column:address"`
		SignerName   string         `gorm:"column:signer_name"`
		SingerMobile string         `gorm:"column:singer_mobile"`
		Post         string         `gorm:"column:post"`
	}
)

func newOrderModel(conn *gorm.DB, c cache.CacheConf) *defaultOrderModel {
	return &defaultOrderModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`order`",
	}
}

func (m *defaultOrderModel) Insert(ctx context.Context, data *Order) error {
	goZeroMallOrderIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderIdPrefix, data.Id)
	goZeroMallOrderOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderOrderSnPrefix, data.OrderSn)
	goZeroMallOrderTradeNoKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderTradeNoPrefix, data.TradeNo)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, goZeroMallOrderIdKey, goZeroMallOrderOrderSnKey, goZeroMallOrderTradeNoKey)
	return err
}

func (m *defaultOrderModel) FindOne(ctx context.Context, id int64) (*Order, error) {
	goZeroMallOrderIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderIdPrefix, id)
	var resp Order
	err := m.QueryCtx(ctx, &resp, goZeroMallOrderIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Order{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*Order, error) {
	goZeroMallOrderOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderOrderSnPrefix, orderSn)
	var resp Order
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallOrderOrderSnKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&Order{}).Where("`order_sn` = ?", orderSn).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) FindOneByTradeNo(ctx context.Context, tradeNo string) (*Order, error) {
	goZeroMallOrderTradeNoKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderTradeNoPrefix, tradeNo)
	var resp Order
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallOrderTradeNoKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&Order{}).Where("`trade_no` = ?", tradeNo).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderModel) Update(ctx context.Context, data *Order) error {
	goZeroMallOrderIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderIdPrefix, data.Id)
	goZeroMallOrderOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderOrderSnPrefix, data.OrderSn)
	goZeroMallOrderTradeNoKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderTradeNoPrefix, data.TradeNo)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, goZeroMallOrderIdKey, goZeroMallOrderOrderSnKey, goZeroMallOrderTradeNoKey)
	return err
}

func (m *defaultOrderModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroMallOrderIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderIdPrefix, id)
	goZeroMallOrderOrderSnKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderOrderSnPrefix, data.OrderSn)
	goZeroMallOrderTradeNoKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderTradeNoPrefix, data.TradeNo)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&Order{}, id).Error
	}, goZeroMallOrderIdKey, goZeroMallOrderOrderSnKey, goZeroMallOrderTradeNoKey)
	return err
}

func (m *defaultOrderModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallOrderIdPrefix, primary)
}

func (m *defaultOrderModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Order{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultOrderModel) tableName() string {
	return m.table
}
