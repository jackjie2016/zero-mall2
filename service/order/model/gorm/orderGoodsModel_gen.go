// Code generated by goctl. DO NOT EDIT!

package gorm

import (
	"context"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
	"strings"
)

var (
	orderGoodsFieldNames          = builder.RawFieldNames(&OrderGoods{})
	orderGoodsRows                = strings.Join(orderGoodsFieldNames, ",")
	orderGoodsRowsExpectAutoSet   = strings.Join(stringx.Remove(orderGoodsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	orderGoodsRowsWithPlaceHolder = strings.Join(stringx.Remove(orderGoodsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMallOrderGoodsIdPrefix = "cache:goZeroMall:orderGoods:id:"
)

type (
	orderGoodsModel interface {
		Insert(ctx context.Context, data *OrderGoods) error
		FindOne(ctx context.Context, id int64) (*OrderGoods, error)
		Update(ctx context.Context, data *OrderGoods) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderGoodsModel struct {
		gormc.CachedConn
		table string
	}

	OrderGoods struct {
		BaseModel

		Order      int32   `gorm:"column:order"`
		GoodsID    int32   `gorm:"column:goods_id"`
		GoodsName  string  `gorm:"column:goods_name"`
		GoodsImage string  `gorm:"column:goods_image"`
		GoodsPrice float32 `gorm:"column:goods_price"`
		Nums       int32   `gorm:"column:nums"`
	}
)

func newOrderGoodsModel(conn *gorm.DB, c cache.CacheConf) *defaultOrderGoodsModel {
	return &defaultOrderGoodsModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`order_goods`",
	}
}

func (m *defaultOrderGoodsModel) Insert(ctx context.Context, data *OrderGoods) error {
	goZeroMallOrderGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderGoodsIdPrefix, data.Id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, goZeroMallOrderGoodsIdKey)
	return err
}

func (m *defaultOrderGoodsModel) FindOne(ctx context.Context, id int64) (*OrderGoods, error) {
	goZeroMallOrderGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderGoodsIdPrefix, id)
	var resp OrderGoods
	err := m.QueryCtx(ctx, &resp, goZeroMallOrderGoodsIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&OrderGoods{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderGoodsModel) Update(ctx context.Context, data *OrderGoods) error {
	goZeroMallOrderGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderGoodsIdPrefix, data.Id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, goZeroMallOrderGoodsIdKey)
	return err
}

func (m *defaultOrderGoodsModel) Delete(ctx context.Context, id int64) error {
	goZeroMallOrderGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallOrderGoodsIdPrefix, id)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&OrderGoods{}, id).Error
	}, goZeroMallOrderGoodsIdKey)
	return err
}

func (m *defaultOrderGoodsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallOrderGoodsIdPrefix, primary)
}

func (m *defaultOrderGoodsModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&OrderGoods{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultOrderGoodsModel) tableName() string {
	return m.table
}
